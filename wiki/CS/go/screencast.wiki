= screencast =

Learn most important steps in go coding by watching the tube, then work out
the codes listed in https://golang.org/doc/code.html


https://golang.org/doc/code.html
Introduction - screencast:
https://www.youtube.com/watch?v=XCsL89YtqCs
Writing, building, installing, and testing Go code.mp4	        6807063 Wed Jul 31 08:42:50 2019

[0:33] all codes should be put in ~/go/src/:
~$ mkdir -p gocode/src/github.com/nf

[0:
-----------------
package main

import (
    "fmt"
)

func main() {
    fmt.Println("Hello, new gopher!")
}
-----------------

[1:45]
~$ export PATH=$HOME/go/bin:$PATH
OSX: Added to the .bash_profile the line above.

By default, the work space is ~/go, but it is ok to use ~/gocode, then add:
~$ export GOPATH=$HOME/gocode

[1:54] packages ...
[2:07]
~$ mkdir -p ~/gocode/src/github.com/nf/string; 
~$ cd string
[2:10]
~$ vi string.go
[2:17] First letter in pkg/functions should be capitalized!

-----------------
package string

func Reverse(s string) string {
    b:= []byte(s)
    for i := 0; i < len(b)/2; i++ {
        j := len(b)-i-1
        b[i], b[j] = b[j], b[i]
    }
    return string(b)
}
-----------------

[2:30]  check the code by using (no news is good news)
~$ go build
[2:45] to make it available to the others to use:
~$ go install
[2.54]
~$ ls ~/gocode/pkg/darwin_amd64/github.com/nf
string.a
[3:00] cd ../hello; vi hello.go

-----------------
package main

import (
    "fmt"
    "github.com/nf/string"
)

func main() {
    fmt.Println(string.Reverse("Hello, new gopher!"))
}
-----------------

[3:25] Is there a bug somewhere?
[3:44] 
~$ cd ../string
~$ vi string_test.go
-----------------
package string

import "testing"

func Test(t *testing.T) {
    var tests = []struct {
        s, want string
    }{
        {"Backward", "drawkcaB"},
        {"Hello, --", "-- , olleH"},
        {"", ""},
    }
    for _, c := range tests {
        got := Reverse(c.s)
        if got != c.want {
            t.Errorf("Reverse(%q) == %q, want %q", c.s, got, c.want)
        }
    }
}

[4:12] 
~$ go test

[4:39] rune is unicode ...
    b := []rune(s)



